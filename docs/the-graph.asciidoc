[[graph]]
The Graph
=========

image::gremlin-standing.png[width=125]

Features
--------

Features are the means by which vendors can expose nuanced difference between their data stores. 

 . *Graph Features*
 . *Vertex Features*
 . *Edge Features*

Vertex Properties
-----------------

image:vertex-properties.png[width=215,float=left] TinkerPop3 introduces the concept of a `VertexProperty<V>`. All the properties of a `Vertex` are a `VertexProperty`. A `VertexProperty` implements `Property` and as such, it has a key/value pair. However, `VertexProperty` also implements `Element` and thus, can have a collection of key/value pairs. Moreover, while an `Edge` can only have one property of key "name" (for example), a `Vertex` can have multiple "name" properties. With the inclusion of vertex properties, two features are introduced which ultimately advance the graph modelers toolkit:

 . Multiple properties (*multi-properties*): a vertex property key can have multiple values (i.e. a vertex can have multiple "name" properties).
 . Properties on properties (*meta-properties*): a vertex property can have properties (i.e. a vertex property can have key/value data associated with it).

A collection of use cases are itemized below:

 * *Permissions*: Vertex properties can have key/value ACL-type permission information associated with them.
 * *Auditing*: When a vertex vertex property is manipulated, it can have key/value information attached to it saying who the creator, deletor, etc. are.
 * *Provenance*: The "name" of a vertex can be declared by multiple users.

A running example using vertex properties is provided below to demonstrate and explain the API.

[source,groovy]
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> v = g.addVertex('name','marko','name','marko a. rodriguez')
==>v[0]
gremlin> v.properties().count()
==>2
gremlin> v.properties('name').count() <1>
==>2
gremlin> v.property('name') <2>
Multiple properties exist for the provided key, use Vertex.properties(name)
Display stack trace? [yN]
gremlin> v.properties()
==>vp[name->marko]
==>vp[name->marko a. rodriguez]
gremlin> v.properties('name')
==>vp[name->marko]
==>vp[name->marko a. rodriguez]
gremlin> vp = v.properties('name').has(value,'marko').next()
==>vp[name->marko]
gremlin> vp.property('acl','private') <3>
==>p[acl->private]
gremlin> vp = v.properties('name').has(value,'marko a. rodriguez').next()
==>vp[name->marko a. rodriguez]
gremlin> vp.property('acl','public')
==>p[acl->public]
gremlin> v.properties('name').has('acl','public').value()
==>marko a. rodriguez
gremlin> v.properties('name').has('acl','public').remove() <4>
==>null
gremlin> v.properties('name').has('acl','public').value()
gremlin> v.properties('name').has('acl','private').value()
==>marko
gremlin> vp = v.properties().next()
==>vp[name->marko]
gremlin> vp.properties()
==>p[acl->private]
gremlin> vp.property('date',2014) <5>
==>p[date->2014]
gremlin> vp.property('creator','stephen')
==>p[creator->stephen]
gremlin> vp.properties()
==>p[date->2014]
==>p[creator->stephen]
==>p[acl->private]
gremlin> v.properties('name').valueMap()
==>[date:2014, creator:stephen, acl:private]
gremlin> v.singleProperty('name','okram') <6>
==>vp[name->okram]
gremlin> v.property('name')
==>vp[name->okram]

<1> A vertex can have zero or more properties with the same key associated with it.
<2> If a vertex has multiple vertex properties for the same key, then `Vertex.property()` is not allowed.
<3> A vertex vertex property can have standard key/value properties attached to it.
<4> Vertex property removal is identical to property removal.
<5> A vertex vertex property can have any number of key/value properties attached to it.
<6> `Vertex.singleProperty()` is a helper method that will remove all existing key'd properties before adding the new single property.

If the concept of vertex properties is difficult to grasp, then it may be best to think of vertex properties in terms of "literal vertices." A vertex can have an edge to a "literal vertex" that has a single value key/value -- e.g. "value=okram." The edge that points to that literal vertex has an edge-label of "name." The properties on the edge represent the literal vertex's properties. The "literal vertex" can not have any other edges to it (only one from the associated vertex).

[[the-crew-toy-graph]]
TIP: A toy graph demonstrating all of the new TinkerPop3 graph structure features is available at `TinkerFactory.createTheCrew()` and `data/tinkerpop-crew*`. This graph demonstrates multi-properties, meta-properties, hidden properties, and graph variables.

.TinkerPop Crew
image::the-crew-graph.png[width=685]

[source,groovy]
gremlin> g = TinkerFactory.createTheCrew()
==>tinkergraph[vertices:6 edges:14]
gremlin> g.V().as('a').properties('location').hasNot('endTime').as('b').
           select{it.value('name')}{it.value() + ':' + it.value('startTime')} // determine the current location of each person
==>[a:marko, b:santa fe:2005]
==>[a:stephen, b:purcellville:2006]
==>[a:matthias, b:seattle:2014]
==>[a:daniel, b:aachen:2009]
gremlin> g.V().has('name','gremlin').inE('uses').
           orderBy('skill').as('a').
           outV().as('b').
             select{it.value('skill')}{it.value('name')} // rank the users of gremlin by their skill level
==>[a:3, b:matthias]
==>[a:4, b:marko]
==>[a:5, b:stephen]
==>[a:5, b:daniel]
gremlin> g.variables() // access the global graph variables
==>variables[size:3]
gremlin> g.variables().get('creator')
==>Optional[marko]
gremlin> g.variables().get('creator').get()
==>marko
gremlin> g.V().has('name',g.variables().get('creator').get()).
           properties('location').as('a').
           valueMap().as('b').
             select(['a','b']){it.value()}{it} // get the creator's vertex and for each location, get the associated properties
==>[a:san diego, b:[startTime:1997, endTime:2001]]
==>[a:santa cruz, b:[startTime:2001, endTime:2004]]
==>[a:brussels, b:[startTime:2004, endTime:2005]]
==>[a:santa fe, b:[startTime:2005]]
gremlin> g.V().properties('visible') // hidden properties are not accessible via properties()
gremlin> g.V().as('a').hiddens('visible').value().as('b').select(){it.value('name')}{it} // determine which vertices are visible
==>[a:marko, b:true]
==>[a:stephen, b:true]
==>[a:matthias, b:true]
==>[a:daniel, b:false]
==>[a:gremlin, b:true]
==>[a:tinkergraph, b:false]

Hidden Properties
-----------------

image:hidden-properties.png[width=175,float=right] A hidden property is a property that is hidden from the various property accessor methods. Hidden properties are typically used in situations where administrative data about an element must be stored that is not so much a description of the element itself. An itemization of use cases are presented below.

 * *Permissions*: What user or groups have read/write permission to this element?
 * *Time keeping*: When was this element created? When does this element expire?
 * *Presentation*: What color should this element be presented as?
 * *Provenance*: Which user created this element?
 * *Auditing*: Has this element been deleted from the system? Who deleted this element?

The hidden properties API is presented in the example below represented in the Gremlin-Groovy REPL. This REPL is accessible via `bin/gremlin.sh` (or `bin/gremlin.bat` for Windows users).

[source,groovy]
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> v = g.addVertex('name','pierre')
==>v[0]
gremlin> v.property('location','belgium')
==>vp[location->belgium]
gremlin> v.property(Graph.Key.hide('status'),'user')
==>vp[status->user]
gremlin> v.keys()
==>name
==>location
gremlin> v.hiddenKeys()
==>status
gremlin> p = v.property(Graph.Key.hide('status'))
==>vp[status->user]
gremlin> p.isHidden()
==>true
gremlin> v.property('status')
==>vp[empty]

Graph Variables
---------------

TinkerPop3 introduces the concept of `Graph.Variables`. Variables are key/value pairs associated with the graph itself -- in essence, a `Map<String,Object>`. These variables are intended to store metadata about the graph. Example use cases include:

 * *Schema information*: What do the namespace prefixes resolve to and when was the schema last modified?
 * *Global permissions*: What are the access rights for particular groups?
 * *System user information*: Who are the admins of the system?

An example of graph variables in use is presented below in Gremlin-Groovy:

[source,groovy]
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> g.variables()
==>variables[size:0]
gremlin> g.variables().set('systemAdmins',['stephen','peter','pavel'])
==>null
gremlin> g.variables().set('systemUsers',['matthias','marko','josh'])
==>null
gremlin> g.variables().keys()
==>systemAdmins
==>systemUsers
gremlin> g.variables().get('systemUsers')
==>Optional[[matthias, marko, josh]]
gremlin> g.variables().get('systemUsers').get()
==>matthias
==>marko
==>josh
gremlin> g.variables().remove('systemAdmins')
==>null
gremlin> g.variables().keys()
==>systemUsers

[[transactions]]
Graph Transactions
------------------

A link:http://en.wikipedia.org/wiki/Database_transaction[database transaction] represents a unit of work to execute against the database.  Transactions are controlled by an implementation of the `Transaction` interface and that object can be obtained from the `Graph` interface using the `tx()` method.  Determining when a transaction starts is dependent upon the behavior assigned to the `Transaction`.  It is up to the `Graph` implementation to determine the default behavior and unless the implementation doesn't allow it, the behavior itself can be altered via these `Transaction` methods:

[source,java]
----
public Transaction onReadWrite(final Consumer<Transaction> consumer);

public Transaction onClose(final Consumer<Transaction> consumer);
----

Providing a `Consumer` function to `onReadWrite` allows definition of how a transaction starts when a read or a write occurs. `Transaction.READ_WRITE_BEHAVIOR` contains pre-defined `Consumer` functions to supply to the `onReadWrite` method.  It has two options:

* `AUTO` - automatic transactions where the transaction is started implicitly to the read or write operation
* `MANUAL` - manual transactions where it is up to the user to explicitly open a transaction, throwing an exception if the transaction is not open

Providing a `Consumer` function to `onClose` allows configuration of how a transaction is handled when `Graph.close()` is called.  `Transaction.CLOSE_BEHAVIOR` has several pre-defined options that can be supplied to this method:

* `COMMIT` - automatically commit an open transaction
* `ROLLBACK` - automatically rollback an open transaction
* `MANUAL` - throw an exception if a transaction is open, forcing the user to explicitly close the transaction

Once there is an understanding for how transactions are configured, most of the rest of the `Transaction` interface is self-explanatory. Note that <<neo4j-gremlin,Neo4j-Gremlin>> is used for the examples to follow as TinkerGraph does not support transactions.

[source,groovy]
----
gremlin> g = Neo4jGraph.open('/tmp/neo4j')
==>neo4jgraph[EmbeddedGraphDatabase [/tmp/neo4j]]
gremlin> g.features
==>FEATURES
> GraphFeatures
>-- Transactions: true  <1>
>-- Computer: false
>-- Persistence: true
...
gremlin> g.tx().onReadWrite(Transaction.READ_WRITE_BEHAVIOR.AUTO) <2>
==>com.tinkerpop.gremlin.neo4j.structure.Neo4jGraph$Neo4jTransaction@1c067c0d
gremlin> g.addVertex("name","stephen")  <3>
==>v[0]
gremlin> g.tx().commit() <4>
==>null
gremlin> g.tx().onReadWrite(Transaction.READ_WRITE_BEHAVIOR.MANUAL) <5>
==>com.tinkerpop.gremlin.neo4j.structure.Neo4jGraph$Neo4jTransaction@1c067c0d
gremlin> g.tx().isOpen()
==>false
gremlin> g.addVertex("name","marko") <6>
Open a transaction before attempting to read/write the transaction
gremlin> g.tx().open() <7>
==>null
gremlin> g.addVertex("name","marko") <8>
==>v[1]
gremlin> g.tx().commit()
==>null
----

<1> Check `features` to ensure that the graph supports transactions.
<2> By default, `Neo4jGraph` is configured with "automatic" transactions, so it is set here for demonstration purposes only.
<3> When the vertex is added, the transaction is automatically started.  From this point, more mutations can be staged or other read operations executed in the context of that open transaction.
<4> Calling `commit` finalizes the transaction.
<5> Change transaction behavior to require manual control.
<6> Adding a vertex now results in failure because the transaction was not explicitly opened.
<7> Explicitly open a transaction.
<8> Adding a vertex now succeeds as the transaction was manually opened.

The `Transaction` object also exposes a method for executing automatic transaction retries:

[source,groovy]
----
gremlin> g.tx().submit{it.addVertex("name","josh")}.retry(10)
==>v[2]
gremlin> g.tx().submit{it.addVertex("name","daniel")}.exponentialBackoff(10)
==>v[3]
----

As shown above, the `submit` method takes a `Function<Graph, R>` which is the unit of work to execute and possibly retry on failure.  The method returns a `Transaction.Workload` object which has a number of default methods for common retry strategies.  It is also possible to supply a custom retry function if a default one does not suit the required purpose.

Gremlin I/O
-----------

image:gremlin-io.png[width=250,float=right] The task of getting data in and out of `Graph` instances is the job of the Gremlin I/O packages.  Gremlin I/O provides two interfaces that for reading and writing `Graph` instances: `GraphReader` and `GraphWriter`.  These interfaces expose methods that support:

* Reading and writing an entire `Graph`
* Reading and writing a `Traversal<Vertex>` as adjacency list format
* Reading and writing a single `Vertex` (with and without associated `Edge` objects)
* Reading and writing a single `Edge`

In all cases, these methods operate in the currency of `InputStream` and `OutputStream` objects, allowing graphs and their related elements to be written to and read from files, byte arrays, etc.


GraphML Reader/Writer
~~~~~~~~~~~~~~~~~~~~~

image:gremlin-graphml.png[width=350,float=left] The link:http://graphml.graphdrawing.org/[GraphML] file format is a common XML-based representation of a graph. It is widely supported by graph-related tools and libraries making it a solid interchange format for TinkerPop. In other words, if the intent is to work with graph data in conjunction with applications outside of TinkerPop, GraphML maybe be the best choice to do that. Common use cases might be:

* Generate a graph link:https://networkx.github.io/[NetworkX], export it with GraphML and import it to TinkerPop.
* Produce a subgraph and export it to GraphML to be consumed by and visualized in link:https://gephi.org/[Gephi].
* Migrate the data of an entire graph to a different graph database not supported by TinkerPop.

As GraphML is a specification for the serialization of an entire graph and not the individual elements of a graph, methods that support input and output of single vertices and edges are not supported.

CAUTION: GraphML is a "lossy" format in that it only supports primitive values for properties and does not have support for `Graph` variables.  It will use `toString` to serialize property values outside of those primitives.

The following code shows how to write a `Graph` instance to file called `tinkerpop-classic.xml` and then how to read that file back into a different instance:

[source,java]
----
final Graph g = TinkerFactory.createClassic();
try (final OutputStream os = new FileOutputStream("tinkerpop-classic.xml")) {
    GraphMLWriter.build().create().writeGraph(os, g);
}

final GraphReader reader = GraphMLReader.build().create();
try (final InputStream stream = new FileInputStream("tinkerpop-classic.xml")) {
    reader.readGraph(stream, g);
}
----

GraphSON Reader/Writer
~~~~~~~~~~~~~~~~~~~~~~

image:gremlin-graphson.png[width=350,float=left] GraphSON is a link:http://json.org/[JSON]-based format extended from earlier versions of TinkerPop. It is important to note that TinkerPop3's GraphSON is not backwards compatible with prior TinkerPop GraphSON versions. GraphSON has some support from graph-related application outside of TinkerPop, but it is generally best used in two cases:

* A text format of the graph or its elements is desired (e.g. debugging, usage in source control, etc.)
* The graph or its elements need to be consumed by code that is not JVM-based (e.g. JavaScript, Python, .NET, etc.)

GraphSON supports all of the `GraphReader` and `GraphWriter` interface methods and can therefore read or write an entire `Graph`, a single `Vertex` or a single `Edge`.  The following code shows how to write a `Graph` instance to file called `tinkerpop-classic.json` and then how to read that file back into a different instance:

[source,java]
----
final Graph g = TinkerFactory.createClassic();
try (final OutputStream os = new FileOutputStream("tinkerpop-classic.json")) {
    GraphSONWriter.build().create().writeGraph(os, g);
}

final GraphReader reader = GraphSONReader.build().create();
try (final InputStream stream = new FileInputStream("tinkerpop-classic.json")) {
    reader.readGraph(stream, g);
}
----

The `GraphSONReader` and `GraphSONWriter` have a number of options that they can be configured with.  One of the important options is the ability to embed type information into the output.  By embedding the types, it becomes possible to serialize a graph without losing type information that might be important when being consumed by another source.  The importance of this concept is demonstrated in the following example where a single `Vertex` is written to GraphSON using the Gremlin Console:

[source,groovy]
----
gremlin> g = TinkerFactory.createClassic()
==>tinkergraph[vertices:6 edges:6]
gremlin> w = GraphSONWriter.build().create()
==>com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter@1af146
gremlin> f = new FileOutputStream('test.txt')
==>java.io.FileOutputStream@5c8eee0f
gremlin> w.writeVertex(f, g.v(1), Direction.BOTH)
==>null
gremlin> f.close()
----

The following GraphSON example shows the output of `GraphSonWriter.writeVertex()` with associated edges:

[source,js]
----
{
    "inE": [],
    "outE": [
        {
            "inV": 3,
            "inVLabel": "vertex",
            "outVLabel": "vertex",
            "id": 9,
            "label": "created",
            "type": "edge",
            "outV": 1,
            "hiddens": {},
            "properties": {
                "weight": 0.4
            }
        },
        {
            "inV": 2,
            "inVLabel": "vertex",
            "outVLabel": "vertex",
            "id": 7,
            "label": "knows",
            "type": "edge",
            "outV": 1,
            "hiddens": {},
            "properties": {
                "weight": 0.5
            }
        },
        {
            "inV": 4,
            "inVLabel": "vertex",
            "outVLabel": "vertex",
            "id": 8,
            "label": "knows",
            "type": "edge",
            "outV": 1,
            "hiddens": {},
            "properties": {
                "weight": 1
            }
        }
    ],
    "id": 1,
    "label": "vertex",
    "type": "vertex",
    "hiddens": {},
    "properties": {
        "name": [
            {
                "id": 0,
                "label": "name",
                "hiddens": {},
                "value": "marko",
                "properties": {}
            }
        ],
        "age": [
            {
                "id": 1,
                "label": "age",
                "hiddens": {},
                "value": 29,
                "properties": {}
            }
        ]
    }
}
----

The vertex properly serializes to valid JSON but note that a consuming application will not automatically know how to interpret the numeric values.  In coercing those Java values to JSON, such information is lost.  For example, it is no longer clear if the `weight` value on the edges should be read as a `Double` or an `Float`.

With a minor change to the construction of the `GraphSONWriter` the lossy nature of GraphSON can be avoided:

[source,groovy]
----
gremlin> w = GraphSONWriter.build().embedTypes(true).create()
==>com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter@350ec41e
----

In the above code, the `embedTypes` option is set to `true` and the output below shows the difference in the output:

[source,js]
----
{
    "@class": "java.util.HashMap",
    "inE": [
        "java.util.ArrayList",
        []
    ],
    "outE": [
        "java.util.ArrayList",
        [
            {
                "@class": "java.util.HashMap",
                "inV": 3,
                "inVLabel": "vertex",
                "outVLabel": "vertex",
                "id": 9,
                "label": "created",
                "type": "edge",
                "outV": 1,
                "hiddens": {
                    "@class": "java.util.HashMap"
                },
                "properties": {
                    "@class": "java.util.HashMap",
                    "weight": [
                        "java.lang.Float",
                        0.4
                    ]
                }
            },
            {
                "@class": "java.util.HashMap",
                "inV": 2,
                "inVLabel": "vertex",
                "outVLabel": "vertex",
                "id": 7,
                "label": "knows",
                "type": "edge",
                "outV": 1,
                "hiddens": {
                    "@class": "java.util.HashMap"
                },
                "properties": {
                    "@class": "java.util.HashMap",
                    "weight": [
                        "java.lang.Float",
                        0.5
                    ]
                }
            },
            {
                "@class": "java.util.HashMap",
                "inV": 4,
                "inVLabel": "vertex",
                "outVLabel": "vertex",
                "id": 8,
                "label": "knows",
                "type": "edge",
                "outV": 1,
                "hiddens": {
                    "@class": "java.util.HashMap"
                },
                "properties": {
                    "@class": "java.util.HashMap",
                    "weight": [
                        "java.lang.Float",
                        1
                    ]
                }
            }
        ]
    ],
    "id": 1,
    "label": "vertex",
    "type": "vertex",
    "hiddens": {
        "@class": "java.util.HashMap"
    },
    "properties": {
        "@class": "java.util.HashMap",
        "name": [
            "java.util.ArrayList",
            [
                {
                    "@class": "java.util.HashMap",
                    "id": [
                        "java.lang.Long",
                        0
                    ],
                    "label": "name",
                    "hiddens": {
                        "@class": "java.util.HashMap"
                    },
                    "value": "marko",
                    "properties": {
                        "@class": "java.util.HashMap"
                    }
                }
            ]
        ],
        "age": [
            "java.util.ArrayList",
            [
                {
                    "@class": "java.util.HashMap",
                    "id": [
                        "java.lang.Long",
                        1
                    ],
                    "label": "age",
                    "hiddens": {
                        "@class": "java.util.HashMap"
                    },
                    "value": 29,
                    "properties": {
                        "@class": "java.util.HashMap"
                    }
                }
            ]
        ]
    }
}
----

The ambiguity of components of the GraphSON is now removed by the `@class` property, which contains Java class information for the data it is associated with.  While the output is more verbose, it comes with the security of not losing type information.  While non-JVM languages won't be able to consume this information automatically, at least there is a hint as to how the values should be coerced back into the correct types in the target language.

[[gremlin-kryo]]
Kryo Reader/Writer
~~~~~~~~~~~~~~~~~~

image:gremlin-kryo.png[width=400,float=left] link:https://github.com/EsotericSoftware/kryo[Kryo] is a popular serialization package for the JVM. Gremlin-Kryo is a binary Graph serialization format for use on the JVM by JVM languages. It is designed to be space efficient, non-lossy and is promoted as the standard format to use when working with graph data inside of the TinkerPop stack. A list of common use cases is presented below:

* Migration from one Gremlin Structure implementation to another (e.g. `TinkerGraph` to `Neo4jGraph`)
* Serialization of individual graph elements to be sent over the network to another JVM.
* Backups of in-memory graphs or subgraphs.

CAUTION: When migrating between Gremlin Structure implementations, Kryo may not lose data, but it is important to consider the features of each `Graph` and whether or not the data types supported in one will be supported in the other.  Failure to do so, may result in errors.

Kryo supports all of the `GraphReader` and `GraphWriter` interface methods and can therefore read or write an entire `Graph`, a single `Vertex` or a single `Edge`.  The following code shows how to write a `Graph` instance to file called `tinkerpop-classic.gio` and then how to read that file back into a different instance:

[source,java]
----
final Graph g = TinkerFactory.createClassic();
try (final OutputStream os = new FileOutputStream("tinkerpop-classic.gio")) {
    KryoWriter.build().create().writeGraph(os, g);
}

final GraphReader reader = KryoReader.build().create();
try (final InputStream stream = new FileInputStream("tinkerpop-classic.gio")) {
    reader.readGraph(stream, g);
}
----

NOTE: The preferred extension for files names produced by Kryo is `.gio`.

TinkerPop2 Data Migration
~~~~~~~~~~~~~~~~~~~~~~~~~

image:data-migration.png[width=300,float=right] For those using TinkerPop2, migrating to TinkerPop3 will mean a number of programming changes, but may also require a migration of the data depending on the graph implementation.  For example, trying to open `TinkerGraph` data from TinkerPop2 with TinkerPop3 code will not work, however opening a TinkerPop2 `Neo4jGraph` with a TinkerPop3 `Neo4jGraph` should work provided there aren't Neo4j version compatibility mismatches preventing the read.

If such a situation arises that a particular TinkerPop2 `Graph` can not be read by TinkerPop3, a "legacy" data migration approach exists.  The migration involves writing the TinkerPop2 `Graph` to GraphSON, then reading it to TinkerPop3 with the `LegacyGraphSONReader` (a limited implementation of the `GraphReader` interface).

The following represents an example migration of the "classic" toy graph.  In this example, the "classic" graph is saved to GraphSON using TinkerPop2.

[source,groovy]
----
gremlin> Gremlin.version()
==>2.5.z
gremlin> g = TinkerGraphFactory.createTinkerGraph()
==>tinkergraph[vertices:6 edges:6]
gremlin> GraphSONWriter.outputGraph(g,'/tmp/tp2.json',GraphSONMode.EXTENDED)
==>null
----

The above console session uses the `gremlin-groovy` distribution from TinkerPop2.  It is important to generate the `tp2.json` file using the `EXTENDED` mode as it will include data types when necessary which will help limit "lossiness" on the TinkerPop3 side when imported.  Once `tp2.json` is created, it can then be imported to a TinkerPop3 `Graph`.

[source,groovy]
----
gremlin> Gremlin.version()
==>x.y.z
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> r = LegacyGraphSONReader.build().create()
==>com.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader@64337702
gremlin> r.readGraph(new FileInputStream('/tmp/tp2.json'),g)
==>null
gremlin> g.E()
==>e[11][4-created->3]
==>e[12][6-created->3]
==>e[7][1-knows->2]
==>e[8][1-knows->4]
==>e[9][1-created->3]
==>e[10][4-created->5]
----

The above console session uses the TinkerPop3 Gremlin Console.  It creates a new `TinkerGraph` which the TinkerPop2 GraphSON will be loaded into and uses the `LegacyGraphSONReader` to import the `tp2.json` file.

Graph Strategy
--------------

A Graph Strategy provides a way to expand, inspect or otherwise alter the behavior of a `Graph` implementation.  A Graph Strategy injects arbitrary functions into the `Graph` API, so that when a method call is made, the strategy functions can manipulate the default behavior of the underlying `Graph`.  TinkerPop3 is packaged with the following strategies:

* `IdGraphStrategy` - enables support for custom element identifiers for those graphs which don't otherwise support them
* `PartitionGraphStrategy` - enables support for logical graph partitioning where the `Graph` can be blinded to different parts of the total graph
* `ReadOnlyGraphStrategy` - prevents writing to the `Graph`
* `SequenceGraphStrategy` - apply multiple `GraphStrategy` implementations in sequenced ordered to a single `Graph` instance
* `SubgraphStrategy` - create a logical subgraph which selectively includes vertices and edges of a `Graph` according to provided criteria

NOTE: TinkerPop2 had the notion of "Graph Wrappers" which decorated standard `Graph` implementations with additional features.  A Graph strategy is generally analogous to that capability.

To use a `GraphStrategy` instance, use the `GraphFactory` to instantiate the `Graph` as follows:

[source,groovy]
----
gremlin> conf = new BaseConfiguration()
==>org.apache.commons.configuration.BaseConfiguration@5b40ceb
gremlin> conf.setProperty("gremlin.graph","com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph")
==>null
gremlin> g = GraphFactory.open(conf, new ReadOnlyGraphStrategy())
==>readonlygraphstrategy[tinkergraph[vertices:0 edges:0]]
----

The above code specifies the creation of a `TinkerGraph` with the use of `ReadOnlyGraphStrategy`.  Note that the `GraphFactory` does not return a `TinkerGraph` instance.  It returns a `StrategyWrappedGraph` which is a traverser for the underlying `TinkerGraph` and the `ReadOnlyGraphStrategy`.  Since `StrategyWrappedGraph` implements the `Graph` interface, it can be used in the same manner as `TinkerGraph` or any other implementation.

[source,groovy]
----
gremlin> g.addVertex('name','stephen')
Graph uses class com.tinkerpop.gremlin.structure.strategy.ReadOnlyGraphStrategy and is therefore unmodifiable
----

The above code tries to mutate the underlying `TinkerGraph`.  Note that `ReadOnlyGraphStrategy` prevents that and throws an exception.  At any point, the `GraphStrategy` can be bypassed by getting the underlying `TinkerGraph`.

[source,groovy]
----
gremlin> bg = g.getBaseGraph()
==>tinkergraph[vertices:0 edges:0]
gremlin> bg.addVertex('name','stephen')
==>v[0]
gremlin> g.v(0l).value('name')
==>stephen
----

By getting the "base graph" (i.e. the underlying `TinkerGraph`) it is possible to mutate the graph.  The above code demonstrates that and also shows that it then possible to read back that added vertex. The following sections explain details of the specific `GraphStrategy` implementations.

IdGraphStrategy
~~~~~~~~~~~~~~~

`IdGraphStrategy` which affords complete control over element identifiers. Some `Graph` implementations, such as `TinkerGraph`, allow specification of custom identifiers when creating elements:

[source,groovy]
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> v = g.addVertex(id, "42a")
==>v[42a]
gremlin> g.v("42a")
==>v[42a]

Other `Graph` implementations, however, generate element identifiers automatically and cannot be assigned:

[source,groovy]
gremlin> g = Neo4jGraph.open('/tmp/neo4j')
==>neo4jgraph[EmbeddedGraphDatabase [/tmp/neo4j]]
gremlin> v = g.addVertex(id, "42a")
Vertex does not support user supplied identifiers
Display stack trace? [yN]

Given the nature of identifier assignment, this means that identifiers are generally not conserved when moving data between graph instances and implementations, to XML and back again, etc. So for applications which need it, there is `IdGraphStrategy`. Using vertex and edge indices under the hood, `IdGraphStrategy` enables custom identifiers irrespective of whether or not the underlying `Graph` implementation allows them.

[source,groovy]
gremlin> g = Neo4jGraph.open('/tmp/neo4j')
==>neo4jgraph[EmbeddedGraphDatabase [/tmp/neo4j]]
gremlin> swg = new StrategyWrappedGraph(g)
==>defaultgraphstrategy[neo4jgraph[EmbeddedGraphDatabase [/tmp/neo4j]]]
gremlin> swg.strategy().setGraphStrategy(IdGraphStrategy.build("idKey").create())
==>null
gremlin> swg.addVertex(id,"42a").id()
==>42a
gremlin> swg.addVertex().id()
==>ef74e843-4c6e-40d2-929f-2552e2f96bf2

When a non-null identifier is passed to `IdGraph.addVertex` or `IdGraph.addEdge`, that value will be used to uniquely identify the element. When the `id` is not provided, `IdGraph` will generate an identifier on its own.

IMPORTANT: The key that is used to store the assigned identifier should be indexed in the underlying graph database.  If it is not indexed, then lookups for the elements that use these identifiers will perform a linear scan.

PartitionGraphStrategy
~~~~~~~~~~~~~~~~~~~~~~

`PartitionGraphStrategy` is a `SubgraphStrategy` which creates logical subgraphs through the use of designated properties.  When each element is written to the `Graph`, it is marked with a property value indicating the current write-partition.  As elements are read from the graph, they are matched against the current set of read-partitions.  The read-partitions thereby define the union of a set of vertices and edges. For example:

[source,groovy]
----
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> strategy = new PartitionGraphStrategy(Graph.Key.hide("partition"), "A")
==>PartitionGraphStrategy
gremlin> sg = new StrategyWrappedGraph(g)
==>strategywrappedgraph[tinkergraph[vertices:0 edges:0]]
gremlin> sg.strategy().setGraphStrategy(strategy)
==>null
----

Add vertices and edges first in one partition, then another:

[source,groovy]
----
gremlin> v1 = sg.addVertex("name", "one")
==>partitiongraphstrategy[v[0]]
gremlin> v2 = sg.addVertex("name", "two")
==>partitiongraphstrategy[v[1]]
gremlin> v1.addEdge("knows", v2)
==>partitiongraphstrategy[e[2][0-knows->1]]
gremlin> strategy.setWritePartition("B")
==>null
gremlin> v3 = sg.addVertex("name", "three")
==>partitiongraphstrategy[v[3]]
gremlin> v1.addEdge("knows", v3)
==>partitiongraphstrategy[e[4][0-knows->3]]
gremlin> 
----

Define sets of partitions which provide access to different subgraphs, or slices of the data:

[source,groovy]
----
gremlin> "in A: " + sg.V().count().next() + ", " + sg.E().count().next()
==>in A: 2, 1
gremlin> strategy.addReadPartition("B")
==>null
gremlin> "in A+B: " + sg.V().count().next() + ", " + sg.E().count().next()
==>in A+B: 3, 2
gremlin> strategy.clearReadPartitions()
==>null
gremlin> strategy.addReadPartition("B")
==>null
gremlin> "in B: " + sg.V().count().next() + ", " + sg.E().count().next()
==>in B: 1, 0
----

Note that there are no edges in the set B, as the only edge added to partition B is incident on a vertex of A.

ReadOnlyGraphStrategy
~~~~~~~~~~~~~~~~~~~~~

`ReadOnlyGraphStrategy` was demonstrated at the start of the `GraphStrategy` section.  It simply prevents write operations that would otherwise mutate the `Graph`.

[source,groovy]
----
gremlin> conf = new BaseConfiguration()
==>org.apache.commons.configuration.BaseConfiguration@5b40ceb
gremlin> conf.setProperty("gremlin.graph","com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph")
==>null
gremlin> g = GraphFactory.open(conf, new ReadOnlyGraphStrategy())
==>readonlygraphstrategy[tinkergraph[vertices:0 edges:0]]
gremlin> g.addVertex('name','stephen')
Graph uses class com.tinkerpop.gremlin.structure.strategy.ReadOnlyGraphStrategy and is therefore unmodifiable
----

SequenceGraphStrategy
~~~~~~~~~~~~~~~~~~~~~

`SequenceGraphStrategy` provides a way to string together a set of `GraphStrategy` implementations, such that they are executed in order from first to last.  The `GraphFactory` provides a straightforward way to invisibly use `SequenceGraphStrategy`:

[source,groovy]
gremlin> conf = new BaseConfiguration()
==>org.apache.commons.configuration.BaseConfiguration@6048e26a
gremlin> conf.setProperty("gremlin.graph",TinkerGraph.class.getName())
==>null
gremlin> g = GraphFactory.open(conf, new ReadOnlyGraphStrategy(), new PartitionGraphStrategy("partition","A"))
==>sequencegraphstrategy[tinkergraph[vertices:0 edges:0]]

The above code demonstrates a `Graph` that uses a `SequenceGraphStrategy` composed of `ReadOnlyGraphStrategy` and `PartitionGraphStrategy`.  When the `SequenceGraphStrategy` is invoked, it will first apply the `ReadOnlyGraphStrategy` and then apply the `PartitionGraphStrategy`.  It is important to consider the ordering of the `GraphStrategy` objects when choosing to use `SequenceGraphStrategy` as it makes no attempts to determine if strategies will be in conflict with one another.  Be aware of the nature of the strategies and ensure that applying them in the order assigned will produce the desirable outcome.

SubgraphStrategy
~~~~~~~~~~~~~~~~

A general-purpose `SubgraphStrategy` is created by defining a "vertex criterion" and an "edge criterion" as Java 8 `Predicates` and applying them to a `Graph`.  All vertices present in the base `Graph` which pass the vertex criterion will be present in the `StrategyWrappedGraph`.  All edges present in the base `Graph` which pass the edge criterion *and* whose in- and out-vertices both pass the vertex criterion will be present in the `StrategyWrappedGraph`.

NOTE: edges are either entirely visible, or entirely invisible to a subgraph.  You will never find an edge which cannot be traversed due to a missing in- or out-vertex.

For example:

[source,java]
----
Graph g = TinkerFactory.createClassic();

Predicate<Vertex> vertexCriterion = vertex -> true;
Predicate<Edge> edgeCriterion = edge -> (int) edge.id() >= 8 && (int) edge.id() <= 10;

GraphStrategy strategy = new SubgraphStrategy(vertexCriterion, edgeCriterion);
StrategyWrappedGraph sg = new StrategyWrappedGraph(g);
sg.strategy().setGraphStrategy(strategy);

// all vertices are here
System.out.println("" + sg.V().count() + " of " + g.V().count() + " vertices");

// only the given edges are included
System.out.println("" + sg.E().count() + " of " + g.E().count() + " edges");
----
